# This file is used to configure the build system for the application.

# By default the name of the package/application is set to the name of the directory.
# However, if this is used as subdirectory or submodule of another project, then the
# name of the package should be set to the name of the project.
PACKAGE="$(basename $(pwd))"

# This application requires git to be installed to set the version.
command -v git &> /dev/null || { echo "[x] git is required to set the version"; exit 1; }
GIT_VERSION="$(git rev-parse --short HEAD)"

# Version number are really just a string of numbers that doesn't mean anything. Because of
# this the version number is set by the git commit date. This how `dpkg-change sets the
# version number.
FULL_VERSION="$(git log -1 --format=%cd --date=format:'%y.%W.%H')-${GIT_VERSION}"

GIT_MAINTAINER="$(git config --get user.name) <$(git config --get user.email)>"

test -n "$GIT_MAINTAINER" || { echo "[x] git user name and email must be set"; exit 1; }

HOMEPAGE="https://github.com/MichaelSchaecher/${PACKAGE}"

ARCHITECTURE="$(dpkg --print-architecture)"

# Common directories that an application is installed to various locations
# in the system. This is used to set the default installation directory.
# The default installation directory is /usr/local/bin, but this can be
#APP_INSTALL_DIR=/usr/local/bin

# Has file or directory in etc?
#USE_CONFIG=false

# If HAS_ETC_FILE is true, then this is where the file or directory will be
# will be listed in the package. A directory with a config can be given or
# just the config file itself if present if the `/etc` directory alone.
#
# Example:
# For a config file:    /etc/${PACKAGE}.conf
# For a config directory: /etc/${PACKAGE}/config
#
# Default: /etc/${PACKAGE}.conf
#APP_CONFIG=/etc/${PACKAGE}.conf

# Some applications have use a config directory that is used to store additional
# config files. Keeping the main config file in the root of the directory as is helping
# to keep this file from being overwritten.
# USE_CONFIG_D=false

# With some applications that you a global `etc` config file in the root of
# the directory a <app_name>.conf.d needs to be created. This is done to keep from
# overwriting the config file if it is already present.
#APP_CONFIG_D=${PACKAGE}.conf.d

# Are there any additional exacutable files/binaries.
#Default: false
#USE_LIB=false

# In most cases an application that that has more than one binary will store
# the binaries in either `/usr/lib<app_name>` or `/usr/local/lib<app_name>`.
#
# Default: /usr/lib/<app_name>
#LIB_DIR=/usr/lib/${PACKAGE}

# Set the the documentation directory. This is used to set the default documentation
# directory for the package. Default: `/usr/share/doc/<app_name>`.
#APP_DOC="/usr/share/doc/${PACKAGE}"

# By default dpkg-craft assumes that a Debian changelog well be generated for the
# DEBIAN directory of the package.
#DEBIAN_CHANGELOG="DEBIAN/changelog"

# Set the changelog for the main app. Default: changelog.DEBIAN.
#APP_CHANGELOG="changelog.DEBIAN"

# Assume that there is no manpage for the application. Default: false
USE_MANPAGE=true

# If the application has a manpage, then set the directory. Default: /usr/share/man/man8
#MANPAGE_DIR=/usr/share/man/man8

# Set the name of the manpage file. this will later be compressed into gzip format.
# The name of the manpage file should be the same as the name of the application.
#
# Default: ${PACKAGE}.8
#MANPAGE_FILE=${PACKAGE}.8
