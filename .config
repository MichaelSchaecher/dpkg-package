# This file is used to configure the build system for the application.

# By default the name of the package/application is set to the name of the directory.
# However, if this is used as subdirectory or submodule of another project, then the
# name of the package should be set to the name of the project.
PACKAGE="$(basename $(pwd))"

# This application requires git to be installed to set the version.
command -v git &> /dev/null || { echo "[x] git is required to set the version"; exit 1; }
GIT_VERSION="$(git rev-parse --short HEAD)"

GIT_MAINTAINER="$(git config --get user.name) <$(git config --get user.email)>"

test -n "$GIT_MAINTAINER" || { echo "[x] git user name and email must be set"; exit 1; }

HOMEPAGE="https://github.com/MichaelSchaecher/${PACKAGE}"

ARCHITECTURE="$(dpkg --print-architecture)"

# Common directories that an application is installed to various locations
# in the system. This is used to set the default installation directory.
# The default installation directory is /usr/local/bin, but this can be
#APP_INSTALL_DIR=/usr/local/bin

# Has file or directory in etc?
#HAS_ETC_FILE=false

# If HAS_ETC_FILE is true, then this is where the file or directory will be
# will be listed in the package. A directory with a config can be given or
# just the config file itself if present if the `/etc` directory alone.
#
# Example:
# For a config file:    /etc/${PACKAGE}.conf
# For a config directory: /etc/${PACKAGE}/config
#
# Default: /etc/${PACKAGE}.conf
#APP_ETC=/etc/${PACKAGE}.conf

# With some applications that you a global `etc` config file in the root of
# the directory a <app_name>.conf.d needs to be created. This is done to keep from
# overwriting the config file if it is already present.
#APP_ETC_D=${PACKAGE}.conf.d

# In most cases an application that that has more than one binary will store
# the binaries in either `/usr/lib<app_name>` or `/usr/local/lib<app_name>`.
#
# Default: /usr/lib/<app_name>
